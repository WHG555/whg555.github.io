---
layout: post  
title: 新语言  
date: 2018-5-10 23:47:37  
group:   
tags: 语言  
---
# 一、实验简介

我们在学习编程语言的时候会学到很多的语法规则，很多巧妙的用法，这些都是怎么实现的？ 本课程就来简单的学习一下。 学习本门课程最重要的目的是了解编程语言的设计思想，这些规则都是如何实现的，实现它的目的是什么，想实现高质量编程，那就应该好好看看本课程。 如果你觉得本实验的代码量很大，一些代码难以理解，可以先往后看，再看回来就明白了。 我们的目标是做工程师，不是做码农，编程思想还是很重要的，算法也是很重要的。

## 1.1 知识点

了解本课程学习的内容
在不同操作系统上搭建环境
编写简单的交互式程序
# 二、为什么要编写 Lisp

Lisp 是一门很强大，很简洁，易学的语言，我们将通过学习它来学习编写一门语言，但是我们的 Lisp 不像其他版本的 Lisp ，它更小，更简单，更容易学。 学习本课程的最好方式是 code yourself 。如果你学起来比较轻松，我建议你尝试添加或修改已有代码，为语言添加新的特性。虽然每一章都会有详细解释，但我还是给出了大量的代码示例。我知道很多人会直接将代码拷贝到自己的项目中，但是这样做通常不如自己亲自将代码写出来更加印象深刻。所以，请不要这样做！

# 三、安装

在开始学习 c 语言之前，我们需要安装一些必要的东西，搭建好编程的环境。好在过程并不复杂，我们只需要两个工具：代码编辑器和编译器。

## 3.1 代码编辑器

代码编辑器其实就是一个更适合写代码的文本编辑器。它提供一些诸如关键字高亮，智能提示等功能帮助我们更快更好的编写代码。

在 Linux 上，建议你用 gedit。不过如果你手头上有现成的代码编辑器也是可以的，但请不要使用 IDE。本课程构建的小小程序不会用到 IDE 所提供的便利，反而让你不清楚发生了什么。
在 Mac OS X 上，一个可以使用的编辑器是 TextWrangler，如果你有其他喜欢 的，也是可以的，但请不要使用 Xcode，这种小项目使用 Xcode 反而会让你搞不清楚细节。
在 Windows 上，我建议你使用 Notepad++，如果你有其他喜欢的也是可以的。但是请不要使用 Visual Studio，因为它对 C 语言的支持并不好，使用它会遇到很多问题。
## 3.2 编译器

编译器的作用是将我们写好的 c 语言的代码翻译成电脑能够直接运行的程序。不同 的操作系统安装编译器的过程也是有差别的。另外编译和运行 C 外外使用程序需要知道一些基本的命令行操作，本课程不会教你怎么使用命令行。如果你从来没听说过命令行，你可以到网上搜一些教程看看。

在 Linux 上，你可以通过下载并安装开发包获得 c 语言的编译器。如果你的系统是 Ubuntu 或 Debian，你可以通过这行命令来安装： sudo apt-get install build-essential 。

在 Mac OS X 上，你需要在应用商店里下载并安装最新版的 Xcode。然后在命令行中运行 xcode-select --install 来安装 Command Line Tools。

在 Microsoft Windows 上，你可以下载并安装 MinGW，具体的安装及配置方法可以到网上搜几个教程看一看，这里不再细说。

## 3.3 错误

如果你的 c 语言程序写的存在问题，可能会导致编译失败。这个错误可能是简单的语法错误，也可能是其他的一些难以理解的复杂错误。编译失败后，编译器会向你提供一些有用的错误信息，如果你看不懂，可以到网上搜索一下。你要相信，在你之前肯定有很多人遇到了和你一样的错误。另外，程序中可能同时存在多个错误，记得要从第一条开始解决。而有时，程序虽然编译成功了，但是运行的时候却崩溃掉了。这就需要对程序进行一些调试性的工作，设法找出问题所在。

## 3.4 文档

可能会遇到一些你从来没有见过的函数。如果想知道这个函数的作用，应该去查找 c 语言标准库的在线文档，这个文档中介绍了 c 语言中所有的标准库函数的作用及其用法。

# 四、交互

## 4.1 交互式编程

在编写我们的 Lisp 之前，我们需要寻找一种和它交互的方式。最简单的方法，我们可以修改代码，重新编译，然后再次运行。这个方案虽然理论上可行，但是太为繁琐。如果可以动态地和程序进行交互，我们就可以快速地测试程序在各种条件下的行为。我们称这种模式为交互提示。

这种模式下的程序读取用户的输入，在程序内部进行处理，然后返回一些信息给用户。这种系统也被叫做 REPL，是 read-evaluate-print loop (读取-求值-输出循环)的简写。这种技术被广泛地应用在各种编程语言的解释器中，如果你学过 Python，那你一定不会陌生。在编写一个完整的 REPL 之前，我们先实现一个简单的程序：读取用户的输入，简单处理后返回给用户。在后面的章节中，我们会对这个程序不断扩展，最后能够正确地读取并解析一个真正的 Lisp 程序，并将结果返回给用户。

## 4.2 交互提示

为了实现这个简单的想法，可以使用一个循环不断打印信息并等待用户输入。为了获取用户输入的内容，我们可以使用 stdio.h 中的 fgets 函数。这个函数可以一直读取直到遇到换行符为止。我们需要找个地方存储用户的输入。为此可以声明一个固定大小的数组缓冲区。一旦获取到用户输入的字符串，就可以使用 printf 将它打印到命令行中。

	#include <stdio.h>

	static char input[2048];

	int main(int argc, char** argv) 
	{

        puts("Lispy Version 0.1");
        puts("Press Ctrl+c to Exit\n");

        while (1) 
	    {
            fputs("lispy> ", stdout);
            fgets(input, 2048, stdin);
	        printf("No you're a %s", input);
        } 
        return 0;
	}

编写完毕后保存退出：

gcc -std=c99 -Wall prompt.c -o prompt


## 4.3 使用 editline 库

我们会用到 editline 库提供的两个函数： readline 和 add_history 。 readline 和 fgets 一样，从命令行读取一行输入，并且允许用户使用左右箭头进行编辑。 add_history 可以纪录下我们之前输入过的命令，并使用上下箭头来获取。 在 Linux 上，可以使用 sudo apt-get install libedit-dev 来安装 editline 。

	#include <stdio.h>
	#include <stdlib.h>
	#include <editline/readline.h>
	#include <editline/history.h>
	int main(int argc, char** argv) 
	{
	    puts("Lispy Version 0.1");
	  	puts("Press Ctrl+c to Exit\n");
	
	    while (1) 
		{
	
	        char* input = readline("lispy> ");
	
	        add_history(input);
	
	        printf("No you're a %s\n", input);
	
	        free(input);
	    } 
	    return 0;
	}  

编写完毕后开始编译：  

	gcc -std=c99 -Wall prompt.c -ledit -o prompt


五、预处理器

对于这样的一个小程序而言，我们针对不同的系统编写不同的代码是可以的。但是对于比较复杂的程序可能就要报错。理想情况下，我希望我的代码可以在任何操作系统上编译并运行。这在 c/c++ 语言中是个很普遍的问题，叫做可移植性 (portability) 。这通常都是个很棘手的问题。但是有一个机制可以帮助我们，叫做预处理器 (preprocessor) 。

预处理器也是一个程序，它在编译之前运行。它有很多作用。而我们之前就已经悄悄地用过预处理器了。任何以井号 # 开头的语句都是一个预处理命令。为了使用标准库中的函数，我们已经用它来包含(include)过头文件了。

预处理的另一个作用是检测当前的代码在哪个操作系统中运行，从而来产生平台相关的代码。而这也正是我们做可移植性工作时所需要的。

在 Windows 上，我们可以伪造一个 readline 和 add_history 函数，而在其 他系统上就使用 editline 库提供给我们的真正有作用的函数。

为了达到这个目的，我们需要把平台相关的代码包在 #ifdef 、 #else 和 #endif 预处理命令中。如果条件为真，包裹在 #ifdef 和 #else 之间的代 码就会被执行，否则， #else 和 endif 之间的代码被执行。

	#include <stdio.h>
	#include <stdlib.h>
	#ifdef _WIN32
	#include <string.h>
	static char buffer[2048];
	
	char* readline(char* prompt) {
	    fputs(prompt, stdout);
	    fgets(buffer, 2048, stdin);
	    char* cpy = malloc(strlen(buffer)+1);
	    strcpy(cpy, buffer);
	    cpy[strlen(cpy)-1] = '\0';
	    return cpy;
	}
	void add_history(char* unused) {}
	#else
	#include <editline/readline.h>
	#include <editline/history.h>
	#endif
	int main(int argc, char** argv) {
	
	    puts("Lispy Version 0.1");
	    puts("Press Ctrl+c to Exit\n");
	    while (1) {
	
	    char* input = readline("lispy> ");
	    add_history(input);
	    printf("No you're a %s\n", input);
	    free(input);
	    } 
	    return 0;
	}


总结

通过本项目，我们初步了解了要做什么，我们应该如何来学习编写语言的基本操作，并且学习了交互式编程，预处理器等内容，code yourself ，继续看下一节吧。

来源: 实验楼
链接: https://www.shiyanlou.com/courses/670
本课程内容，由作者授权实验楼发布，未经允许，禁止转载、下载及非法传播